// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String    // Note: In production, ensure this is properly hashed
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contents  Content[]
}

model Content {
  id                  Int                   @id @default(autoincrement())
  title               String
  videoSubject        String
  status              String                @default("pending")
  progress            Float                 @default(0)
  currentStep         String?
  generatedContent    String?               // JSON string
  generatedPicture    String?
  generatedVoice      String?
  generatedMusic      String?
  generatedVideo      String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  user                User                  @relation(fields: [userId], references: [id])
  userId              Int
  generalOptions      GeneralOptions?
  contentOptions      ContentOptions?
  visualPromptOptions VisualPromptOptions?
  scenes              Scene[]
  audioPrompts        AudioPrompt[]
  visualPrompts       VisualPrompt[]
  musicPrompt         MusicPrompt?
}

model GeneralOptions {
  id             Int     @id @default(autoincrement())
  style          String
  description    String
  sceneAmount    Int
  duration       Int
  tone           String
  vocabulary     String
  targetAudience String
  content        Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId      Int     @unique
}

model ContentOptions {
  id          Int     @id @default(autoincrement())
  pacing      String
  description String
  content     Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   Int     @unique
}

model VisualPromptOptions {
  id                 Int     @id @default(autoincrement())
  pictureDescription String
  style              String
  imageDetails       String
  shotDetails        String
  content            Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId          Int     @unique
}

model Scene {
  id          Int     @id @default(autoincrement())
  type        String
  description String
  content     Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   Int
}

model AudioPrompt {
  id          Int     @id @default(autoincrement())
  type        String
  sceneNumber Int
  description String
  content     Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   Int
}

model VisualPrompt {
  id          Int     @id @default(autoincrement())
  type        String
  sceneNumber Int
  description String
  content     Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   Int
}

model MusicPrompt {
  id          Int     @id @default(autoincrement())
  description String
  content     Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   Int     @unique
}